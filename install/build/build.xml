<!--
/*
 * Funambol is a mobile platform developed by Funambol, Inc.
 * Copyright (C) 2003 - 2007 Funambol, Inc.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by
 * the Free Software Foundation with the addition of the following permission
 * added to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED
 * WORK IN WHICH THE COPYRIGHT IS OWNED BY FUNAMBOL, FUNAMBOL DISCLAIMS THE
 * WARRANTY OF NON INFRINGEMENT  OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301 USA.
 *
 * You can contact Funambol, Inc. headquarters at 643 Bair Island Road, Suite
 * 305, Redwood City, CA 94063, USA, or at email address info@funambol.com.
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License version 3.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License
 * version 3, these Appropriate Legal Notices must retain the display of the
 * "Powered by Funambol" logo. If the display of the logo is not reasonably
 * feasible for technical reasons, the Appropriate Legal Notices must display
 * the words "Powered by Funambol".
 */
 -->

<?html version="1.0" enconding="UTF-8"?>

<!-- $Id: build.xml,v 1.28 2008-07-02 16:16:05 magi Exp $
===================================================================================================
Forge file for Funambol Windows Sync Client

====================================================================================================
-->

<project basedir=".." default="all" name="FunambolWindowsSyncClient">

<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
    <!--
    ========================================================================
      ALL
    ========================================================================
    -->
    <target name="all">
        <antcall target="usage"/>
    </target>

    <target name="usage">
       <echo message="Usage: ant [options]"/>
       <echo message=""/>
       <echo message="where options is"/>
       <echo message="release         : to regdll + checkout + build + forge + generate docs. Both for comed and cared"/>
       <echo message="release-nodocs  : to regdll + checkout + build + forge. Both for comed and cared"/>
       <echo message="docs            : to checkout + forge + generate docs"/>
       <echo message=""/>
       <echo message="work-all        : clean, build the installer, no checkout (build from dev working dirs). Both for comed and cared"/>
       <echo message="work-all-noreg  : clean, build the installer, no checkout (build from dev working dirs), no reg DLL. Both for comed and cared"/>
       <echo message="work-dev        : no clean, build the installer, no checkout (build from dev working dirs). Comed"/>
       <echo message="work-cared-dev  : no clean, build the installer, no checkout (build from dev working dirs). Cared"/>
       <echo message="docs-dev        : clean, to only generate doxygen docs, no checkout (build from dev working dirs)"/>
    </target>

    <target name="release"        depends="init, clean, build, register-dll, checkout-src, create-docs, 
                                           forge-src, compile, forge, build-install, build-install-cared, generate-update-info"/>
    <target name="release-nodocs" depends="init, clean, build, register-dll, checkout-src, forge-src, 
                                           compile, forge, build-install, build-install-cared, generate-update-info"/>
    <target name="docs "          depends="init, clean, build, checkout-src, create-docs, forge-src, generate-update-info"/>


    <!-- These execute on working dir (for dev purpose) -->
    <target name="work-all">
        <antcall target="clean"/>
        <antcall target="work-dev"/>
        <antcall target="build-install-cared"/>
    </target>
    <target name="work-dev"       depends="init, build, register-dll, compile-no-checkout, forge-no-checkout, build-install, generate-update-info"/>
    <target name="work-cared-dev" depends="init, build, register-dll, compile-no-checkout, forge-no-checkout, build-install-cared, generate-update-info"/>

    <target name="work-all-noreg">
        <antcall target="clean"/>
        <antcall target="work-dev-noreg"/>
        <antcall target="work-cared-dev-noreg"/>
    </target>
    <target name="work-dev-noreg"       depends="init, build, compile-no-checkout, forge-no-checkout, build-install, generate-update-info"/>
    <target name="work-cared-dev-noreg" depends="init, build, compile-no-checkout, forge-no-checkout, build-install-cared, generate-update-info"/>
    <target name="docs-dev"             depends="init, clean, build, create-docs-no-checkout, generate-update-info"/>


    <!--
    ========================================================================
      INIT: Setting variables
    ========================================================================
    -->
    <target name="init">

        <!-- Output dirs -->
        <property name="dir.distribution"         value="${basedir}"/>
        <property name="dir.output"               value="${dir.distribution}/output"/>
        <property name="dir.export.SVN"           value="${dir.distribution}/output/export"/>
        <property name="dir.forge"                value="${dir.distribution}/installer"/>
        <property name="dir.fileset"              value="${dir.distribution}/installer/fileset"/>
        <property name="dir.presetup"             value="${dir.distribution}/installer/presetup"/>
        <property name="dir.redemptionLib"        value="${dir.distribution}/installer/Redemption_Lib"/>
        <property name="dir.redemptionLibRedist"  value="${dir.distribution}/installer/Redemption_Lib/enterprise"/>

        <!-- Dirs to read src from (no-checkout build) -->
        <property name="dir.src"            value="funambol-windows-sync-client-src-"/>
        <property name="dir.windows"        value="${dir.distribution}/.."/>
        <property name="dir.ui"             value="${dir.windows}/UI"/>
        <property name="dir.mainclientdll"  value="${dir.windows}/mainclientDll"/>
        <property name="dir.outlookaddin"   value="${dir.windows}/Addin"/>
        <property name="dir.design"         value="${dir.windows}/docs"/>
        <property name="dir.native_api"     value="${dir.windows}/cpp-sdk"/>
        <property name="dir.zlib"           value="${dir.native_api}/tools/zlib"/>
        <property name="dir.presetup"       value="${dir.windows}/install/installer/presetup"/>

        <!-- Log files -->
        <property name="log.SVN"            value="${dir.output}/SVN_export.log"/>
        <property name="log.client"         value="${dir.output}/build_client.log"/>
        <property name="log.NSIS"           value="${dir.output}/build_NSIS.log"/>
        <property name="log.NSIS_sp"        value="${dir.output}/build_NSIS_SP.log"/>
        <property name="log.doxygen"        value="${dir.output}/build_doxygen.log"/>


        <property file="build/funambol-windows-client-forge.properties"/>

        <!-- Property TODAY contains the formatted date, like "14 November 2008" -->
        <tstamp>
            <format property="TODAY" pattern="d MMMM yyyy" locale="en,UK"/>
        </tstamp>
        
        
        <!-- Set default dir paths, if not already specified in funambol-windows-client-forge.properties -->
        <property environment="env"/>
        <if>
            <isset property="env.PROGRAMFILES"/>
            <then>
                <!-- If running under cygwin -->
                <property name="vs2005.devenv"       value = "${env.PROGRAMFILES}\Microsoft Visual Studio 9.0\Common7\IDE"/>
                <property name="dir.VCpp2005Lib"     value = "${env.PROGRAMFILES}\Microsoft Visual Studio 9.0\VC\redist\x86"/>
                <property name="install-builder.dir" value = "${env.PROGRAMFILES}\NSIS"/>
            </then>
        <elseif>
            <isset property="env.ProgramFiles"/>
            <then>
                <!-- If running from cmd.exe  -->
                <property name="vs2005.devenv"       value = "${env.ProgramFiles}\Microsoft Visual Studio 9.0\Common7\IDE"/>
                <property name="dir.VCpp2005Lib"     value = "${env.ProgramFiles}\Microsoft Visual Studio 9.0\VC\redist\x86"/>
                <property name="install-builder.dir" value = "${env.ProgramFiles}\NSIS"/>
            </then>        
        </elseif>
        </if>
        <property name="install-builder.nsi" value = "${install-builder.dir}\makensis.exe"/>
        <echo message="vs2005.devenv       = ${vs2005.devenv}" />
        <echo message="dir.VCpp2005Lib     = ${dir.VCpp2005Lib}" />
        <echo message="install-builder.nsi = ${install-builder.nsi}" />
        
        <property name="MSLib.atl"        value="Microsoft.VC90.ATL"/>
        <property name="MSLib.mfc"        value="Microsoft.VC90.MFC"/>
        <property name="MSLib.crt"        value="Microsoft.VC90.CRT"/>
                
        <echo message="MSLib.atl       = ${MSLib.atl}" />
        <echo message="MSLib.mfc       = ${MSLib.mfc}" />
        <echo message="MSLib.crt       = ${MSLib.crt}" />
       


        <condition property="client.targetbuild"
            value="Release MinDependency|Win32"
            else="Debug|Win32">
            <equals arg1="${build.debug}" arg2="false"/>
        </condition>

        <condition property="plugin.dir.obj"
            value="Release"
            else="Debug">
            <equals arg1="${build.debug}" arg2="false"/>
        </condition>

        <condition property="addin.dir.obj"
            value="ReleaseMinDependency"
            else="Debug">
            <equals arg1="${build.debug}" arg2="false"/>
        </condition>
    </target>


    <!--
    ========================================================================
      BUILD
    ========================================================================
    -->
    <target name="build" depends="init">

        <!-- Update the build date automatically, build number is manually set -->
        <propertyfile file  = "${dir.distribution}/build/release.properties" comment = "Funambol Windows Sync Client" >
            <entry key="build.date" type="date" value="now" pattern="yyyyMMdd"/>
        </propertyfile>

        <!-- Load release.propeties -->
        <property file="${dir.distribution}/build/release.properties"/>
        <echo message="*********************" />
        <echo message="Build release: ${release.major}.${release.minor}.${build.number}" />
        <echo message="*********************" />


    <!-- Output dirs for src files -->
    <property name="dir.output_src"               value="${dir.output}/${dir.src}${release.major}.${release.minor}.${build.number}"/>
    <property name="dir.output_src.home"          value="${dir.output_src}/Funambol/Windows Sync Client"/>
    <property name="dir.output_src.windows"       value="${dir.output_src.home}"/>
    <property name="dir.output_src.native_api"    value="${dir.output_src.home}/cpp-sdk"/>
    <property name="dir.output_src.zlib"          value="${dir.output_src.native_api}/tools/zlib"/>
    <property name="dir.output_src.UI"            value="${dir.output_src.windows}/UI"/>
    <property name="dir.output_src.mainclientdll" value="${dir.output_src.windows}/mainclientdll"/>
    <property name="dir.output_src.outlookaddin"  value="${dir.output_src.windows}/Addin"/>
    <property name="dir.output_src.design"        value="${dir.output_src.windows}/docs"/>
    <property name="dir.output_src.install"       value="${dir.output_src.windows}/install"/>
    
    <!-- 
      Set the 'funambol.swv' value, to be passed at the NSIS installer.
      For default builds, the funambol.swv is the same.
      For branded buids, these properies have already been set.
    -->
    <property name="funambol.release.major" value="${release.major}"/>
    <property name="funambol.release.minor" value="${release.minor}"/>
    <property name="funambol.build.number"  value="${build.number}" />
    <property name="funambol.swv"  value="${funambol.release.major}.${funambol.release.minor}.${funambol.build.number}" />
    <echo message="Funambol product version: ${funambol.swv}" />

    </target>


    <!--
    ========================================================================
      CHECKOUT-SRC
    ========================================================================
    -->
    <target name="checkout-src" depends="init">

        <mkdir dir="${dir.export.SVN}"/>

        <!--
        Checkout files from SVN.
        -->
        <echo message="Checkout source files from SVN (tag = ${module.src.tag})..."/>
        <echo message="output to file: ${log.SVN}"/>

        <echo message="svn export --username guest --force ${svn.url}/${module.src.tag} ${dir.export.SVN}"/>
        <exec dir="${dir.export.SVN}" executable="svn" failonerror="true" output="${log.SVN}" >
             <arg line="export --username guest --force ${svn.url}/${module.src.tag} ${dir.export.SVN}"/>
        </exec>

    </target>




    <!--
    ========================================================================
      REGISTER-DLL
    ========================================================================
    -->
    <target name="register-dll" depends="init">

        <!-- If redist DLL exists, use it (will not show the popup)
             DLL is copied because sometimes the dll attribute is not executable -->
        <available file="${dir.redemptionLibRedist}/Redemption.dll" property="redemption.redist.exists"/>
        <if>
            <isset property="redemption.redist.exists"/>
            <then>
                <echo message="Copying Redist Redemption.dll"/>
                <copy file="${dir.redemptionLibRedist}/Redemption.dll" todir="${dir.output}" overwrite="TRUE"/>
            </then>
            <else>
                <echo message="Copying free Redemption.dll"/>
                <copy file="${dir.redemptionLib}/Redemption.dll"       todir="${dir.output}" overwrite="TRUE"/>
            </else>
        </if>

        <echo message="Registering Redemption DLL..."/>
        <exec dir="${dir.output}" executable="regsvr32" failonerror="true" >
            <arg line="/s Redemption.dll"/>
        </exec>

    </target>


    <!--
    ========================================================================
      FORGE SRC
    ========================================================================
    -->
    <target name="forge-src" depends="init,build,checkout-src">

        <!-- Copy source files under 'funambol-windows-sync-client-src-x.y.z' and zip them -->
        <mkdir dir="${dir.output_src.home}"/>
        <copy todir="${dir.output_src.home}" >
            <fileset dir="${dir.export.SVN}"/>
        </copy>

        <zip destfile="${dir.output_src}.zip">
            <fileset dir="${dir.output_src}"/>
        </zip>

    </target>



    <!--
    ========================================================================
      COMPILE
    ========================================================================
    -->
    <target name="compile" depends="init,checkout-src">
        <mkdir dir="${dir.output}"/>

        <echo message="Compiling Windows Client..."/>
        <exec dir="${dir.output_src.windows}" executable="${vs2005.devenv}/devenv" failonerror="true">
            <arg line="WindowsClient.sln /Upgrade"/>
        </exec>
        <exec dir="${dir.output_src.windows}" executable="${vs2005.devenv}/devenv" failonerror="true">
            <arg line="WindowsClient.sln /Out ${log.client}  /Build ${client.targetbuild}"/>
        </exec>

        <!-- Open log and continue -->
        <!-- <exec dir="${dir.output}" executable="notepad" spawn="true"> <arg line="${log.client}"/> </exec> -->

    </target>


    <!--
    ========================================================================
      COMPILE-NO-CHECKOUT
    ========================================================================
    -->
    <target name="compile-no-checkout" depends="init">
        <mkdir dir="${dir.output}"/>

        <!-- Note: compile from dev working dirs -->

        <echo message="Compiling Windows Client..."/>
         <exec dir="${dir.windows}" executable="${vs2005.devenv}/devenv" failonerror="true">
            <arg line="WindowsClient.sln /Upgrade"/>
        </exec>
        <exec dir="${dir.windows}" executable="${vs2005.devenv}/devenv" failonerror="true">
            <arg line="WindowsClient.sln /Out ${log.client} /Build ${client.targetbuild}"/>
        </exec>

        <!-- Open log and continue -->
        <!-- <exec dir="${dir.output}" executable="notepad" spawn="true"> <arg line="${log.client}"/> </exec> -->

    </target>


    <!--
    ========================================================================
      FORGE
    ========================================================================
    -->
    <target name="forge" depends="init,build,forge-src,compile">

        <echo message="Forge files from ${dir.output_src}..." />

        <!-- Create the directory structure under 'fileset' -->
        <mkdir dir="${dir.fileset}"/>
        <mkdir dir="${dir.fileset}/redist"/>
        <mkdir dir="${dir.fileset}/docs"/>
        <mkdir dir="${dir.fileset}/images"/>
        <mkdir dir="${dir.fileset}/LICENSES"/>


        <!--Copy ALL files from 'presetup' to 'fileset' -->
        <copy todir="${dir.fileset}" overwrite="TRUE">
            <fileset dir="${dir.output_src.install}/installer/presetup"/>
        </copy>

        <!-- Update the Readme.txt file automatically: version and release date -->
        <replace file="${dir.fileset}/Readme.txt" token="Version:" value="Version: ${release.major}.${release.minor}.${build.number}"/>
        <replace file="${dir.fileset}/Readme.txt" token="Release date:" value="Release date: ${TODAY}" />
        <fixcrlf srcdir="${dir.fileset}" includes="**/Readme.txt" eol="crlf"/>

        <!-- 'release.properties' is copied from this working dir -->
        <copy file="${dir.distribution}/build/release.properties" todir="${dir.fileset}/docs"/>


        <!--
        Copy DLLs and needed files into fileset dir
        -->
        <copy todir="${dir.fileset}" overwrite="TRUE">
            <fileset dir="${dir.output_src.mainclientdll}/build/${plugin.dir.obj}" includes="winmainclientdll.dll"/>
            <fileset dir="${dir.output_src.UI}/build/${plugin.dir.obj}"            includes="FunambolClient.exe"/>
            <fileset dir="${dir.output_src.install}/installer/Redemption_Lib"      includes="Redemption.dll"/>
            <fileset dir="${dir.output_src.outlookaddin}/${addin.dir.obj}"         includes="FunambolAddin.dll"/>
        </copy>

        <copy todir="${dir.fileset}/images" overwrite="TRUE">
            <fileset dir="${dir.output_src.UI}/src/res" includes="mainLogo.ico"/>
        </copy>
        
    <!-- These are DLLs required to run VC++ software -->
	    <copy todir="${dir.fileset}/redist" overwrite="TRUE">
            <fileset dir="${dir.VCpp2005Lib}" includes="**/${MSLib.atl}/, **/${MSLib.crt}/, **/${MSLib.mfc}/" />
        </copy>
        <!--copy todir="${dir.fileset}/redist" overwrite="TRUE">
            <fileset dir="${dir.VCpp2005Lib}" includes="**/Microsoft.VC80.ATL/, **/Microsoft.VC80.CRT/, **/Microsoft.VC80.MFC/" />
        </copy>
		     <copy todir="${dir.fileset}/redist" overwrite="TRUE">
            <fileset dir="${dir.VCpp2005Lib}" includes="**/Microsoft.VC90.ATL/, **/Microsoft.VC90.CRT/, **/Microsoft.VC90.MFC/" />
        </copy-->
    </target>
		

    <!--
    ========================================================================
      FORGE-NO-CHECKOUT
    ========================================================================
    -->
    <target name="forge-no-checkout" depends="init,build,compile-no-checkout">

        <!-- Note: files are copied from dev working dirs -->
        <echo message="Forge files from ${dir.windows}..." />

        <!-- Create the directory structure under 'fileset' -->
        <mkdir dir="${dir.fileset}"/>
        <mkdir dir="${dir.fileset}/redist"/>
        <mkdir dir="${dir.fileset}/docs"/>
        <mkdir dir="${dir.fileset}/images"/>
        <mkdir dir="${dir.fileset}/LICENSES"/>


        <!--Copy all files from 'presetup' to 'fileset' -->
        <copy todir="${dir.fileset}" overwrite="TRUE">
            <fileset dir="${dir.presetup}" excludes="**/*.bak, **/*.my, **/.#*, **/.svn/" />
        </copy>

        <!-- Update the Readme.txt file automatically: version and release date -->
        <replace file="${dir.fileset}/Readme.txt" token="Version:" value="Version: ${release.major}.${release.minor}.${build.number}"/>
        <replace file="${dir.fileset}/Readme.txt" token="Release date:" value="Release date: ${TODAY}" />
        <fixcrlf file="${dir.fileset}/Readme.txt"/>

        <!-- Copy release.properties -->
        <copy file="${dir.distribution}/build/release.properties" todir="${dir.fileset}/docs"/>


        <!--
        Copy DLLs and needed files into fileset dir
        -->
        <copy todir="${dir.fileset}" overwrite="TRUE">
            <fileset dir="${dir.mainclientdll}/build/${plugin.dir.obj}" includes="winmainclientdll.dll"/>
            <fileset dir="${dir.ui}/build/${plugin.dir.obj}"            includes="FunambolClient.exe"/>
            <fileset dir="${dir.redemptionLib}"                         includes="Redemption.dll"/>
            <fileset dir="${dir.outlookaddin}/${addin.dir.obj}"         includes="FunambolAddin.dll"/>
        </copy>

        <copy todir="${dir.fileset}/images" overwrite="TRUE">
            <fileset dir="${dir.ui}/src/res" includes="mainLogo.ico"/>
        </copy>


    <!-- These are DLLs required to run VC++ software -->
	 <copy todir="${dir.fileset}/redist" overwrite="TRUE">
            <fileset dir="${dir.VCpp2005Lib}" includes="**/${MSLib.atl}/, **/${MSLib.crt}/, **/${MSLib.mfc}/" />
        </copy>
        <!--copy todir="${dir.fileset}/redist" overwrite="TRUE">
            <fileset dir="${dir.VCpp2005Lib}" includes="**/Microsoft.VC80.ATL/, **/Microsoft.VC80.CRT/, **/Microsoft.VC80.MFC/" />
        </copy>
         <copy todir="${dir.fileset}/redist" overwrite="TRUE">
            <fileset dir="${dir.VCpp2005Lib}" includes="**/Microsoft.VC90.ATL/, **/Microsoft.VC90.CRT/, **/Microsoft.VC90.MFC/" />
        </copy-->
    </target>


    <!--
    ========================================================================
    BUILD-INSTALL
    ========================================================================
    -->
    <target name="build-install" depends="init,copy-NSIS-plugins" >
        <mkdir dir="${dir.output}"/>

        <echo message="${install-builder.nsi}" />
        <echo message="output to: ${log.NSIS}" />
        <exec dir="${dir.forge}" executable="${install-builder.nsi}" output="${log.NSIS}" failonerror="true">
            <arg line="/DPRODUCT_VERSION=${release.major}.${release.minor}.${build.number}
                       /DFILE_NAME=${fileName} 
                       /DFUNAMBOL_SWV=${funambol.swv} 
                       /DMSLIB_ATL=${MSLib.atl}
                       /DMSLIB_MFC=${MSLib.mfc}
                       /DMSLIB_CRT=${MSLib.crt}
                       ${script.nsi} "/>
        </exec>
        
        <!-- It's generated by NSIS installer, it's used by generate-update-info target -->
        <property name="output.file.name" value="${fileName}-${release.major}.${release.minor}.${build.number}.exe" />
        
    </target>


    <!--
    ========================================================================
    BUILD-INSTALL_FOR_CARED
    ========================================================================
    -->
    <target name="build-install-cared" depends="init,copy-NSIS-plugins" >
        <mkdir dir="${dir.output}"/>

        <!-- Portal version is builded with the REDIST REDEMPTION.DLL -->
        <echo message="Replace Redemption.dll with the redistributable one..." />
        <copy todir="${dir.fileset}" overwrite="TRUE">
            <fileset dir="${dir.redemptionLibRedist}" includes="Redemption.dll"/>
        </copy>


        <echo message="${install-builder.nsi}" />
        <echo message="filename = ${fileNameCared}" />
        <echo message="output to: ${log.NSIS_sp}" />
        <exec dir="${dir.forge}" executable="${install-builder.nsi}" output="${log.NSIS_sp}" failonerror="true">
            <arg line="/DPRODUCT_VERSION=${release.major}.${release.minor}.${build.number}
                       /DFILE_NAME=${fileNameCared}
                       /DFUNAMBOL_SWV=${funambol.swv} /DMSLIB_ATL=${MSLib.atl}
                       /DMSLIB_MFC=${MSLib.mfc}
                       /DMSLIB_CRT=${MSLib.crt}
                       ${script.nsi} " />
        </exec>
        
        <!-- It's generated by NSIS installer, it's used by generate-update-info target -->
        <property name="output.file.name" value="${fileNameCared}-${release.major}.${release.minor}.${build.number}.exe" />
        
    </target>


    <!--
    ========================================================================
    COPY-PROCESSWORK-DLL
    ========================================================================
    -->
    <target name="copy-NSIS-plugins" depends="init" >
        
        <echo message="copying processwork NSIS plugin..." />
        <copy file="${dir.windows}/install/installer/processwork.dll" todir="${install-builder.dir}/Plugins" overwrite="TRUE"/>
        
        <echo message="copying UAC NSIS plugin..." />
        <copy file="${dir.windows}/install/installer/UAC/UAC.nsh" todir="${install-builder.dir}/Include" overwrite="TRUE"/>
        <copy file="${dir.windows}/install/installer/UAC/UAC.dll" todir="${install-builder.dir}/Plugins" overwrite="TRUE"/>
        
    </target>


    <!--
    ========================================================================
    CLEAN
    ========================================================================
    -->
    <target name="clean" depends="init">
        <delete dir="${dir.output}"/>
        <delete dir="${dir.fileset}"/>
    </target>



    <!--
    ========================================================================
    CREATE DOCS
    ========================================================================
    -->
    <target name="create-docs" depends="init,checkout-src">

        <mkdir dir="${dir.output}"/>
        <property name="doxyfile"      value="${dir.distribution}/doxygen/Doxyfile"/>
        <property name="olclient.root" value="output/export"/>
        <property name="cppapi.root"   value="output/export/cpp-sdk"  />

        <echo message="Creating documentation with doxygen..." />
    <exec dir="output/export/docs" executable="doxygen" output="${log.doxygen}" >
            <arg line="${doxyfile}" />
            <env key="FUNAMBOL_OLPLUGIN_ROOT" path="${olclient.root}"/>            <!-- root of OLPlugin project      -->
            <env key="FUNAMBOL_NATIVE_ROOT"   path="${cppapi.root}"/>            <!-- root of Native API project    -->
            <env key="ENABLED_SECTIONS"  value="API OLPLUGIN" />                <!-- add "DEV" for complete docs   -->
            <env key="SHOW_PRIVATE_DATA" value="YES" />                            <!-- "YES" to show private members -->
            <env key="HAVE_DOT"          value="YES" />                            <!-- "NO" to hide graphs           -->
        </exec>
    </target>


    <!--
    ========================================================================
    CREATE DOCS - NO CHECKOUT
    ========================================================================
    -->
    <target name="create-docs-no-checkout" depends="init">
        <!-- Create doxygen docs from working env -->

        <mkdir dir="${dir.output}"/>
        <property name="doxyfile"      value="${dir.distribution}/doxygen/Doxyfile"/>
        <property name="olclient.root" value="${dir.windows}"   />
        <property name="cppapi.root"   value="${dir.native_api}"/>

        <echo message="Creating documentation with doxygen..." />
        <exec dir="${dir.design}" executable="doxygen" output="${log.doxygen}" >
            <arg line="${doxyfile}" />
        <env key="FUNAMBOL_OLPLUGIN_ROOT" path="${olclient.root}"/>                <!-- root of OLPlugin project      -->
        <env key="FUNAMBOL_NATIVE_ROOT"   path="${cppapi.root}"/>                <!-- root of Native API project    -->
        <env key="ENABLED_SECTIONS"      value="API OLPLUGIN" />                <!-- add "DEV" for complete docs   -->
        <env key="SHOW_PRIVATE_DATA"     value="YES" />                            <!-- "YES" to show private members -->
        <env key="HAVE_DOT"              value="YES" />                            <!-- "NO" to hide graphs           -->
        </exec>
    </target>



    <!--
    ========================================================================
    GENERATE UPDATE INFO
    ========================================================================
    -->

   <target name="generate-update-info">
        <property name="ol-upd-info"        value="windows-upd-info"/>
       
         <touch file="${dir.output}/${ol-upd-info}"/>

         <if>
          <equals arg1="${build.number}" arg2="${build.date}" />
          <then>
           <property name="sis.build.number" value="0"/>
           </then>
          <else>
          <property name="sis.build.number" value="${build.number}"/>
           </else>
          </if>

        <echo message="#File Descriptor" file="${dir.output}/${ol-upd-info}" append="false" />

        <tstamp>
            <format property="TODAY" pattern="d MMMM yyyy" locale="en,UK"/>
        </tstamp>
        
        <length file="${dir.output}/${output.file.name}" property="fs.length.bytes" />

        <echo message="#File Descriptor${line.separator}" file="${dir.output}/${ol-upd-info}" append="false"/>
        <echo message="#${TODAY}${line.separator}${line.separator}" file="${dir.output}/${ol-upd-info}" append="true"/>
        <echo message="# The latest version available for update${line.separator}" file="${dir.output}/${ol-upd-info}" append="true"/>
        <echo message="version=${release.major}.${release.minor}.${sis.build.number}${line.separator}${line.separator}" file="${dir.output}/${ol-upd-info}" append="true"/>
        <echo message="# The activation date expressed in the format YYYYMMDD${line.separator}" file="${dir.output}/${ol-upd-info}" append="true"/>
        <echo message="activation-date=null${line.separator}${line.separator}" file="${dir.output}/${ol-upd-info}" append="true"/>

        <echo message="# The file size expressed in bytes${line.separator}" file="${dir.output}/${ol-upd-info}" append="true"/>

        <echo message="size=${fs.length.bytes}${line.separator}${line.separator}" file="${dir.output}/${ol-upd-info}" append="true"/>

        <echo message="# The update type: optional, recommended, mandatory${line.separator}" file="${dir.output}/${ol-upd-info}" append="true"/>
        <echo message="type=recommended" file="${dir.output}/${ol-upd-info}" append="true"/>

    </target>

</project>
